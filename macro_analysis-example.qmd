---
title: "macro_analysis_Pratt"
subtitle: "BIO 131 Project Data Analysis"
author: "Marney Pratt"
date: "October 23, 2024"
format: 
  html:
    code-overflow: wrap
    embed-resources: true
---

# Getting Setup

Keep all of your analysis in this same .qmd file and keep all the associated files in the project folder. Make sure the project name is showing in the upper right of the RStudio window.

## Load packages

```{r}
#| label: setup
#| message: false
#| warning: false

suppressPackageStartupMessages(
  library(tidyverse)) ## for readr, dplyr, ggplot2
library(ggbeeswarm) ## for jittering points (you can remove this is you did not use a dotplotv)
library(flextable) ## for making formatted tables that can be pasted into Word or Google Docs
library(ggpubr) ## for making QQ-plots

```

## Import Data

Figure out which data file(s) you need to import (see the metadata files for more information about each data file).

Find the code you need by clicking on the "script_templates" folder then selecting the "importing_data" folder in the "Files" tab in the lower right area of RStudio.

Copy and paste the code you need into the chunk below (Do **NOT** run the code directly from the script template, copy and paste the template code below)

```{r}
#| label: import data

env <- read_csv("data/env.csv",
         col_types = cols(date = col_date(format = "%Y-%m-%d"),
          
          location = col_factor(levels = c(
            "Downstream","Upstream")), 
          
          season = col_factor(levels = c("Summer","Fall")), 
          
          year = col_factor()
         )) 

macros <- read_csv("data/macros.csv",
           col_types = cols(date = col_date(format = "%Y-%m-%d"),
            
            location = col_factor(levels = c(
              "Downstream","Upstream")), 
            
            season = col_factor(levels = c("Summer","Fall")), 
            
            year = col_factor()
           )) 


master.taxa <- read_csv("data/master.taxa.csv",
                show_col_types = FALSE)  |>  
  distinct()


```

# Data Wrangling

Find the code you need to prepare or "wrangle" your data to make any calculations needed and combine any datasets you need to combine by looking in the "data_wrangling" folder within the "script_templates" folder. Copy and paste the code you need in the chunk below.

Note, once you have completed this code chunk, you should have a new data frame called my.df that has ONE value per sampleID. You will then use this new data frame going forward.

```{r}
#| label: data wrangling
#| message: false
#| warning: false

#calculate density for each sampleID
density.df <- macros |> 
  
  #join taxa info
  left_join(master.taxa) |>
  
  # Summarize for each sampleID and each genus 
  group_by(sampleID, genus) |> 
  dplyr::summarise(density = sum(invDens, na.rm = TRUE)) |> 
  
  #fill in group combos where there were none present with zeros
  ungroup() |> 
  complete(sampleID, genus,
           fill = list(density = 0)) |> 
  
  #filter for genus of interest 
  #this needs to match what is in the macros file
  #replace this blank with the genus you want to keep
  filter(genus == "Ferrissia")

#get sample info and env variables of interest
variables <- macros |>
  
  #join environmental variables
  left_join(env) |> 
  
  #select variables of interest
  #delete anything you don't need
  #add anything you do need in the blank with commas in between
  dplyr::select(date, sampleID, season, year, location, benthicArea,
                DO, wTemp) |> 
  distinct()

#add sample info back to density data
my.df <- left_join(density.df, variables) |> 
  
  #filter out anything you don't want
  #the example below would filter out just the year 2018
  dplyr::filter(year != "2018") |> 
  
  #remove rows with missing data
  na.omit()

```

# Data Description

## Summary Table of Sampling Effort

Make a table of the data that you used in your analysis (how many samples and how much area was sampled in each of the groups) to include in the Data Analysis Methods section of your presentation. Go to the "data_description" script templates then look in the folder called "sample_table" and select the correct version of the 'sample_table' script based on which factors you are using and paste that code below.

If you have no factors included, then use the 'sample_table_year.R' script

```{r}
#| label: tbl-sample-table
#| tbl-cap: Sample Summary Table
#| include: true


table.sum <- my.df |>  #put the name of your wrangled data here
  
  #summarize by date, season, & location (to get number of microhabs and area sampled per date)
  group_by(date, season, location) |> 
  summarize(
    area = sum(benthicArea),
    samples = n()) |> 
  
  #summarize by season & location 
  group_by(season, location) |> 
  summarize(
    dates = str_c(date, collapse = ", "),
    samples = sum(samples),
    area = sum(area))  

#To get a formatted table, make sure that the {flextable} package is loaded
#Use additional code to create the summary table called "table.sum"
#If you want to format the table yourself, then don't use this code

#see https://davidgohel.github.io/flextable/ for more information and formatting options

#create the formatted table
ft <- flextable(table.sum) |> 

#create header labels
set_header_labels(season = "Season",
                  location = "Location",
                  dates = "Dates",
                  samples = "# of Samples",
                  area = "Total Area Sampled (m^2)") |> 

  #format superscript
  compose(j = "area", part="header",
          value = as_paragraph(
            "Total Area Sampled (m", 
            as_sup("2"),
            ")")) |> 
  
  #formatting
  theme_vanilla()  |>  
  fontsize(size = 10) |> 
  
  #set table properties
  set_table_properties(layout = "autofit", width = 1) |> 
  
  #center columns
  align(align = "center", part = "all" )

#print the table
#right click on the table, choose select all, 
#choose copy, then paste in your document
#finish formatting as needed in your document
ft



```

## Data Exploration and Description

Start by exploring the nature of each of your continuous variables to see if it is normally distributed and how you might want to summarize it.

### QQ Plots

Use a QQ plot to see if each continuous variable is normally distributed. Since most groups have at least two continuous variables, there is code for each in the chunk below. If you only have one continuous variable, just delete the second one.

The `color` and `facet.by` functions splits the plots up by any factors you have. If you have no factors, then delete one or both of those lines and the comma from the above line.

Let's start with graphing a QQ Plot of the independent variable(s)

You only need to replace the BLANKS (indicated by underscores) in the code below based on the instructions in the comments

```{r}
#| label: Independent variable QQ plots 

#make a QQ plot for each independent variable that is continuous
ggpubr::ggqqplot(
  data = my.df,         #put the data frame name here 
  "DO",                 #put the continuous variable name here
  color = "location",   #put one factor here (remove if no factors)
  facet.by = "season"   #put another factor here (remove if no factors)
  )  

#make a QQ plot for the same variable but on a log scale
#note that we add one to the values before taking the log
#because you can't take the log of zero
#if there are no zero values, you can remove the +1
ggpubr::ggqqplot(
  data = my.df,         #put the data frame name here 
  "log(DO + 1)",                 #put the continuous variable name here
  color = "location",   #put one factor here (remove if no factors)
  facet.by = "season"   #put another factor here (remove if no factors)
  )  


```

If the data on a log scale is fairly similar to the not-logged scale, then just use the normal (not-logged) values for this variable when you graph it.

If the data on the log scale looks closer to a normal distribution (the points are closer to the line), then use the logged values for this variable when you graph it.

Next we will check the dependent variable to see if it is normally distributed by using QQ Plots

```{r}
#| label: Dependent variable QQ plots 

#make a QQ plot for each dependent variable that is continuous
ggpubr::ggqqplot(
  data = my.df,         #put the data frame name here 
  "density",            #put the continuous variable name here
  color = "location",   #put one factor here (remove if no factors)
  facet.by = "season"   #put another factor here (remove if no factors)
  )  


#make a QQ plot for the same variable but on a log scale
#note that we add one to the values before taking the log
#because you can't take the log of zero
#if there are no zero values, you can remove the +1
ggpubr::ggqqplot(
  data = my.df,         #put the data frame name here 
  "log(density + 1)",   #put the continuous variable name here
  color = "location",   #put one factor here (remove if no factors)
  facet.by = "season"   #put another factor here (remove if no factors)
  )  

```

If the data on a log scale is fairly similar to the not-logged scale, then just use the normal (not-logged) values for this variable when you graph it.

If the data on the log scale looks closer to a normal distribution (the points are closer to the line), then use the logged values for this variable when you graph it. (TIP - Density values are almost always better shown on a log-scale for this dataset)

## Descriptive Statistics

Next, we will summarize all the descriptive statistics for each continuous variable so you have all the values in case you need them.

The code is already pasted below, but you can also find this same code in the "script_templates" folder, select "descriptive_stats" then select the "descritive_stats_all.R" script

You only need to replace the BLANKS (indicated by underscores) in the code below based on the instructions in the comments

First let's summarize the continuous independent variable (if you do not have a continuous independent variable, then you can delete this code chunk)

```{r}
#| label: tbl-descriptive-stats-independent
#| tbl-cap: Independent Variable Descriptive Statistics - All
#| include: true

# replace the blank below with a continuous independent variable 
x.var <- "DO" 

# replace the blank below with the name of the dataframe
indep.sum <- my.df  |>  
  # remove missing values from continuous variables
  filter(!is.na(.data[[x.var]])) |> 
  
  # replace the blank with the categorical variable(s) (aka factors)
  group_by(season, location) |> 
  
  # calculate the descriptive stats
  summarize(Mean = mean(.data[[x.var]]), 
            Median = median(.data[[x.var]]), 
            SD = sd(.data[[x.var]]), 
            IQR = IQR(.data[[x.var]]), 
            Min = min(.data[[x.var]]),
            Max = max(.data[[x.var]]),
            Sample.size = n())

indep.sum

```

You should NOT include this full table with unrounded values in your presentation.

You need to decide which values, if any, you want to include and make sure that you round them properly. You can revisit how to round things and which values might be useful to include by going back to what we did during the Introduction to Data Visualization lab (see the [dataviz GitHub repository here](https://github.com/marneypratt/dataviz/blob/master/dataviz.qmd) if you can't find your own copy).

If you would like a formatted table of some of the descriptive statistics, copy the appropriate code from the scripts in "script_templates", "data_description", then "descriptive_stats". If you don't plan on including a formatted table of descriptive statistics in your presentation, you can delete this code chunk.

```{r}
#| label: tbl-descriptive-stats-independent-formatted
#| tbl-cap: Independent Variable Descriptive Statistics
#| include: true

# to use this code, the following packages must be loaded
# tidyverse
# flextable
#see https://davidgohel.github.io/flextable/ for more info & formatting options

# replace the blank below with a continuous variable you want to summarize
x.var <- "DO" 

#calculate descriptive stats
#replace the blank below with the name of the dataframe
df.sum <- my.df |> 
  
  # replace the blank with the categorical variable(s)
  group_by(season, location) |> 
  
  # remove missing values 
  filter(!is.na(.data[[x.var]])) |> 
  
  # calculate the descriptive stats
  # replace the blanks with the number of digits 
  # to the right of the decimal place based on the rounded SD
  # do not place anything in the empty parentheses in the n() 
  # N represents the sample size within each group
  summarise(Median = round(median(.data[[x.var]]), digits=2),
            min = round(min(.data[[x.var]]), digits=2),
            max = round(max(.data[[x.var]]), digits=2),
            N = n()) |> 
  mutate(Range = paste(min, max, sep = "-")) |> 
  dplyr::select(-min, -max) |> 
  relocate(N, .after = last_col())

#create the formatted table
ft <- flextable(df.sum,
                cwidth = 0.75) |>  #can vary cell width as needed
  
  #bold the headings
  bold(part = "header") |> 
  
  #center columns & autofit
  align(align = "center", part = "all" ) |> 
  set_table_properties(layout = "autofit")

#print the table
#right click on the table, choose select all, 
#choose copy, then paste in your document
#finish formatting as needed in your document
ft

```

Next let's summarize the continuous dependent variable.

```{r}
#| label: tbl-descriptive-stats-dependent
#| tbl-cap: Dependent Variable Descriptive Statistics - All
#| include: true

# replace the blank below with a continuous independent variable 
x.var <- "density" 

# replace the blank below with the name of the dataframe
dep.sum <- my.df  |>  
  # remove missing values from continuous variables
  filter(!is.na(.data[[x.var]])) |> 
  
  # replace the blank with the categorical variable(s) (aka factors)
  group_by(season, location) |> 
  
  # calculate the descriptive stats
  summarize(Mean = mean(.data[[x.var]]), 
            Median = median(.data[[x.var]]), 
            SD = sd(.data[[x.var]]), 
            IQR = IQR(.data[[x.var]]), 
            Min = min(.data[[x.var]]),
            Max = max(.data[[x.var]]),
            Sample.size = n())

dep.sum

```

Again, you should NOT include this full table with unrounded values in your presentation.

You need to decide which values, if any, you want to include and make sure that you round them properly. You can revisit how to round things and which values might be useful to include by going back to what we did during the Introduction to Data Visualization lab (see the [dataviz GitHub repository here](https://github.com/marneypratt/dataviz/blob/master/dataviz.qmd) if you can't find your own copy).

If you would like a formatted table of some of the descriptive statistics, copy the appropriate code from the scripts in "script_templates", "data_description", then "descriptive_stats". If you don't plan on including a formatted table of descriptive statistics in your presentation, you can delete this code chunk.

```{r}
#| label: tbl-descriptive-stats-dependent-formatted
#| tbl-cap: Dependent Variable Descriptive Statistics
#| include: true

# to use this code, the following packages must be loaded
# tidyverse
# flextable
#see https://davidgohel.github.io/flextable/ for more info & formatting options

# replace the blank below with a continuous variable you want to summarize
x.var <- "density" 

#calculate descriptive stats
#replace the blank below with the name of the dataframe
df.sum <- my.df |> 
  
  # replace the blank with the categorical variable(s)
  group_by(season, location) |> 
  
  # remove missing values 
  filter(!is.na(.data[[x.var]])) |> 
  
  # calculate the descriptive stats
  # replace the blanks with the number of digits 
  # to the right of the decimal place based on the rounded SD
  # do not place anything in the empty parentheses in the n() 
  # N represents the sample size within each group
  summarise(Median = round(median(.data[[x.var]]), digits=0),
            min = round(min(.data[[x.var]]), digits=0),
            max = round(max(.data[[x.var]]), digits=0),
            N = n()) |> 
  mutate(Range = paste(min, max, sep = "-")) |> 
  dplyr::select(-min, -max) |> 
  relocate(N, .after = last_col())

#create the formatted table
ft <- flextable(df.sum,
                cwidth = 0.75) |>  #can vary cell width as needed
  
  #bold the headings
  bold(part = "header") |> 
  
  #center columns & autofit
  align(align = "center", part = "all" ) |> 
  set_table_properties(layout = "autofit")

#print the table
#right click on the table, choose select all, 
#choose copy, then paste in your document
#finish formatting as needed in your document
ft

```



# Data Visualization

Find the code you need to visualize (=graph) your data by looking in the "graphing" folder within the "script_templates" folder. Copy and paste the code you need in the chunk below.

```{r}
#| label: limpet density vs DO graph
#| message: false

# this code will make a scatter plot 
# if you do not want a line of best fit, then delete the geom_smooth() line

ggplot(
  data = my.df, #put the data frame name here
  
  #set the aesthetics
  aes(x = DO,       #put the factor on the x-axis
      y = density + 1,       #continuous variable = y
      color = location)) + #put the same factor as on x-axis 
  
  #add points
  geom_point(size = 3) +    #sets the size of the points
  
  #add best fit line
  geom_smooth(method = "lm", se = FALSE) + 

  #nicer labels (see axis.labels.R script)
  xlab("Dissolved Oxygen (mg/L)") +
  ylab(bquote("Limpet Density (number/"~m^2*")")) +
  labs(color = "Location") + #label for the color key
  
  
  #additional formatting
  theme_classic(base_size = 16)  +  #sets the font size
  theme(legend.position = "top") +  #controls legend/key
  
  scale_y_log10() +     #changes y-axis to log-scale
  annotation_logticks(sides = "l") + # adds log-scale tick marks

  facet_wrap(vars(season))   #place factor to split by facets here

#see the resources below for some additional options to make a nice scatter plot 
# https://www.datanovia.com/en/lessons/ggplot-scatter-plot/
# https://ggplot2.tidyverse.org/index.html

```

To save your graph with the `ggsave()` function, you need to name the resulting file with surrounding " ", and indicate the size via height, width, and units. Don't forget to save the graph with a dpi call between 300-500 to make it nice and crisp! Look at the `ggsave()` help file for more information and options.

```{r}
#| eval: false


# save the graph!
ggsave(filename="images/limpet.DO.png",  #recommended to use.png or .jpg file types
       height = 5, width = 8, units = "in", 
       dpi = 300)

```

```{r}
#| label: limpet density vs wTemp graph
#| message: false


# this code will make a scatter plot 
# if you do not want a line of best fit, then delete the geom_smooth() line

ggplot(
  data = my.df, #put the data frame name here
  
  #set the aesthetics
  aes(x = wTemp,       #put the factor on the x-axis
      y = density + 1,       #continuous variable = y
      color = location)) + #put the same factor as on x-axis 
  
  #add points
  geom_point(size = 3) +    #sets the size of the points
  
  #add best fit line
  geom_smooth(method = "lm", se = FALSE) + 

  #nicer labels (see axis.labels.R script)
  xlab("Water Temperature ("~degree~"C)") +
  ylab(bquote("Limpet Density (number/"~m^2*")")) +
  labs(color = "Location") + #label for the color key
  
  
  #additional formatting
  theme_classic(base_size = 16)  +  #sets the font size
  theme(legend.position = "top") +  #controls legend/key
  
  scale_y_log10() +     #changes y-axis to log-scale
  annotation_logticks(sides = "l") + # adds log-scale tick marks

  facet_wrap(vars(season))   #place factor to split by facets here

#see the resources below for some additional options to make a nice scatter plot 
# https://www.datanovia.com/en/lessons/ggplot-scatter-plot/
# https://ggplot2.tidyverse.org/index.html

```

```{r}
#| eval: false


# save the graph!
ggsave(filename="images/limpet.wTemp.png",  #recommended to use.png or .jpg file types
       height = 5, width = 8, units = "in", 
       dpi = 300)

```

```{r}

#| label: wTemp vs season and location

#this code will make a dot plot with median and all points included
#make sure you have loaded the ggbeeswarm package to use geom_quasirandom()

ggplot(
  data = my.df, #put the data frame name here
  
  #set the aesthetics
  aes(x = location,       #put the factor on the x-axis
      y = wTemp,       #continuous variable = y
      color = location)) + #same factor as x-axis for color
  
  #adds quasirandom jittered points
  geom_quasirandom(
    shape = 19,            #shape as circle
    size = 2,              #size of point
    alpha = 0.8,           #transparency
    width = 0.25) +        #spread
  
  #adds median
  stat_summary(
    fun = median,       #graphs the median
    geom = "crossbar",  #crossbar shape
    width = 0.5,        #width of the bar
    size = 0.75,        #size
    color = "black") +  #color 
  
  #nicer labels (see axis.labels.R script)
  ylab("Water Temperature ("~degree~"C)") +
  xlab("Location") +
  
  #additional formatting
  theme_classic(base_size = 16)  +  #sets the font size
  theme(legend.position = "none") +  #controls legend/key

  facet_wrap(vars(season))   #place factor to split by facets here

#see the resources below for some additional options to make a nice plot 
# https://www.datanovia.com/en/lessons/ggplot-dot-plot/
# https://ggplot2.tidyverse.org/index.html

```

```{r}
#| eval: false

# save the graph!
ggsave(filename="images/wTemp.season.png",  #recommended to use.png or .jpg file types
       height = 5, width = 8, units = "in", 
       dpi = 300)

```

```{r}
#| label: DO vs wTemp graph
#| message: false

# this code will make a scatter plot 
# if you do not want a line of best fit, then delete the geom_smooth() line

ggplot(
  data = my.df, #put the data frame name here
  
  #set the aesthetics
  aes(x = wTemp,       #put the factor on the x-axis
      y = DO,       #continuous variable = y
      color = location)) + #put the same factor as on x-axis 
  
  #add points
  geom_point(size = 3) +    #sets the size of the points
  
  #add best fit line
  geom_smooth(method = "lm", se = FALSE) + 

  #nicer labels (see axis.labels.R script)
  ylab("Dissolved Oxygen (mg/L)") +
  xlab("Water Temperature ("~degree~"C)") +
  labs(color = "Location") + #label for the color key
  
  
  #additional formatting
  theme_classic(base_size = 16)  +  #sets the font size
  theme(legend.position = "top")   #controls legend/key

#see the resources below for some additional options to make a nice scatter plot 
# https://www.datanovia.com/en/lessons/ggplot-scatter-plot/
# https://ggplot2.tidyverse.org/index.html

```

```{r}
#| eval: false

# save the graph!
ggsave(filename="images/wTemp.DO.png",  #recommended to use.png or .jpg file types
       height = 5, width = 8, units = "in", 
       dpi = 300)

```

# Citing R in Your Paper

In the Data Analysis Methods section of your paper, you need to cite how the data were analyzed including (1) any calculations done (for example, how was density calculated?), and (2) what software was used for the analysis.

Here is a detailed explanation of How to Cite R in your Methods.

You need to cite base R but how will you know what version of R you are using?

You should also cite the **most important packages used**.

All of you should cite the {tidyverse} super package since we used {reader}, {dplyr}, and {ggplot2} to import, wrangle, and graph our data. If you used the dot plot in your paper, then you also used {ggbeeswarm} which is NOT part of the {tidyverse} so it needs to be cited separately. If you used the formatted table in your paper, then cite the {flextable} package. If you used {vegan} to calculate any diversity indices then make sure to cite it.

To properly cite packages, you need to find out the information needed for each package. Run the code below to determine the version of R and packages used. (note that you do NOT need to cite ALL of the packages that the `sessionInfo` function spits out. See above for what you need to cite)

```{r}
#| label: sessionInfo

sessionInfo()

```

The above is the information you need to cite which version of R as well as any packages you used. While the version number is necessary, you also need more information to cite R and the packages. Refer to [How to Cite R in your Methods](https://docs.google.com/presentation/d/1RG4_R-MDOy1vbMz-M1gfOcMtgqWu9Kvv_R4ex5QdcVk/edit?usp=sharing) to help you figure out how to cite in the text or on slides as well as the full citation in the Literature Cited section at the end.

Use the code below to get more necessary information to cite R itself

```{r}
#| label: cite R

#citation info for base R 
citation()

```

Use the code below to cite the {tidyverse} package and then repeat the code replacing "tidyverse" with any other packages you need to cite

```{r}
#| label: cite tidyverse

#citation info for base R 
citation("tidyverse")

```

## Rendering

This is just an example, so you don't need to render or save this file.
